{"ast":null,"code":"// 容器组件  充当一个桥梁的作用，在UI组件和redux之间进行传输\n// 引入UI组件\nimport CountUI from '../../components/count/CountReactRedux.jsx'; // 引入connect用于连接UI组件与redux\n\nimport { connect } from 'react-redux';\nimport { createIncrementAction, createDecrementAction, createIncrementAsyncAction } from '../../redux/count_action';\n/**\r\n * 1、传递给UI组件的函数  返回值是对象\r\n * 2、key作为传递给UI组件props的key value就作为props的value---状态\r\n * 3、mapStateToProps用于传递状态\r\n */\n\n/**\r\n * 1、传递给UI组件的函数  返回值是对象\r\n * 2、key作为传递给UI组件props的key value就作为props的value---状态\r\n * 3、mapDispatchToProps用于传递操作状态的方法\r\n */\n// 使用connect()()创建并暴露一个容器组件  编码上优化版的connect\n\nexport default connect(state => ({\n  count: state\n}), // mapDispatchTpProps的一般写法\n//   (dispatch) => ({\n//     increment: (data) => {\n//       // 通知redux执行操作  加法\n//       dispatch(createIncrementAction(data))\n//     },\n//     decrement: (data) => {\n//       dispatch(createDecrementAction(data))\n//     },\n//     incrementAsync: (data, time) => {\n//       dispatch(createIncrementAsyncAction(data, time))\n//     },\n//   })\n// mapDispatchTpProps的简写\n{\n  increment: createIncrementAction,\n  decrement: createDecrementAction,\n  incrementAsync: createIncrementAsyncAction\n})(CountUI);","map":{"version":3,"sources":["C:/Users/react/demo/src/container/Count/optimizationCount.jsx"],"names":["CountUI","connect","createIncrementAction","createDecrementAction","createIncrementAsyncAction","state","count","increment","decrement","incrementAsync"],"mappings":"AAAA;AACA;AACA,OAAOA,OAAP,MAAoB,4CAApB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SACEC,qBADF,EAEEC,qBAFF,EAGEC,0BAHF,QAIO,0BAJP;AAMA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,eAAeH,OAAO,CACnBI,KAAD,KAAY;AACVC,EAAAA,KAAK,EAAED;AADG,CAAZ,CADoB,EAIpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACEE,EAAAA,SAAS,EAAEL,qBADb;AAEEM,EAAAA,SAAS,EAAEL,qBAFb;AAGEM,EAAAA,cAAc,EAAEL;AAHlB,CAnBoB,CAAP,CAwBbJ,OAxBa,CAAf","sourcesContent":["// 容器组件  充当一个桥梁的作用，在UI组件和redux之间进行传输\r\n// 引入UI组件\r\nimport CountUI from '../../components/count/CountReactRedux.jsx'\r\n\r\n// 引入connect用于连接UI组件与redux\r\nimport { connect } from 'react-redux'\r\n\r\nimport {\r\n  createIncrementAction,\r\n  createDecrementAction,\r\n  createIncrementAsyncAction,\r\n} from '../../redux/count_action'\r\n\r\n/**\r\n * 1、传递给UI组件的函数  返回值是对象\r\n * 2、key作为传递给UI组件props的key value就作为props的value---状态\r\n * 3、mapStateToProps用于传递状态\r\n */\r\n\r\n/**\r\n * 1、传递给UI组件的函数  返回值是对象\r\n * 2、key作为传递给UI组件props的key value就作为props的value---状态\r\n * 3、mapDispatchToProps用于传递操作状态的方法\r\n */\r\n\r\n// 使用connect()()创建并暴露一个容器组件  编码上优化版的connect\r\nexport default connect(\r\n  (state) => ({\r\n    count: state,\r\n  }),\r\n  // mapDispatchTpProps的一般写法\r\n  //   (dispatch) => ({\r\n  //     increment: (data) => {\r\n  //       // 通知redux执行操作  加法\r\n  //       dispatch(createIncrementAction(data))\r\n  //     },\r\n  //     decrement: (data) => {\r\n  //       dispatch(createDecrementAction(data))\r\n  //     },\r\n  //     incrementAsync: (data, time) => {\r\n  //       dispatch(createIncrementAsyncAction(data, time))\r\n  //     },\r\n  //   })\r\n\r\n  // mapDispatchTpProps的简写\r\n  {\r\n    increment: createIncrementAction,\r\n    decrement: createDecrementAction,\r\n    incrementAsync: createIncrementAsyncAction,\r\n  }\r\n)(CountUI)\r\n"]},"metadata":{},"sourceType":"module"}